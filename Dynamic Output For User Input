import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

def rule_to_binary(rule_number):
    return [int(digit) for digit in np.binary_repr(rule_number, width=8)]

def apply_rule(state, rule):
    rule_number = 4 * state[0] + 2 * state[1] + state[2]
    return rule[7 - rule_number]

def step_ca(current_state, rule):
    extended_state = np.pad(current_state, pad_width=1, mode='constant', constant_values=0)
    new_state = np.array([apply_rule(extended_state[i:i+3], rule) for i in range(len(current_state))])
    return new_state

def generate_ca(rule_number, steps, size):
    rule = rule_to_binary(rule_number)
    states = np.zeros((steps, size), dtype=int)
    states[0, size // 2] = 1  # Start in the middle

    for i in range(1, steps):
        states[i] = step_ca(states[i-1], rule)

    return states

def xnor_operation(a, b):
    return np.logical_not(np.logical_xor(a, b)).astype(int)

# User parameters
steps = int(input("Enter the number of steps: "))
grid_size = steps * 2
total_rules = 256

# Initialize figure for animation with increased size and DPI
fig, ax = plt.subplots(figsize=(10, 5), dpi=100)
img = ax.imshow(np.zeros((steps, grid_size)), cmap='binary', vmin=0, vmax=1)
ax.set_xlabel('Cell Position')
ax.set_ylabel('Step')
title = ax.set_title('')

# Animation update function
def update(frame):
    rule_a = frame
    rule_b = frame + 2

    ca_a = generate_ca(rule_a, steps, grid_size)
    ca_b = generate_ca(rule_b, steps, grid_size)

    overlay_xnor = np.zeros_like(ca_a)
    for i in range(steps):
        overlay_xnor[i] = xnor_operation(ca_a[i], ca_b[i])

    img.set_array(overlay_xnor)
    title.set_text(f'XNOR Overlay: Rules {rule_a} and {rule_b}')

    return img, title

# Create and run the animation
ani = FuncAnimation(fig, update, frames=total_rules, interval=800)

# Display the animation
plt.show()
